#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rules generateLayoutContigsInputs and layoutContigs collect the bits
#  and bobs from the assembly (nodemap, edges, alignments, paths, lengths)
#  and creates a layout for Canu's utgcns to generate consensus sequences from.
#
#  generateLayoutContigsInputs doesn't need all the resources it claims it
#  needs, but in order to 'group' them together into a single grid job,
#  we need to make it have the same resources as layoutContigs.
#
#  But, sigh, job grouping won't work with our profiles/config.yaml.
#  The created job group is missing {params.jobid} and execution fails
#  with the cryptic error:
#    Traceback (most recent call last):
#      File "/usr/local/lib/python3.8/site-packages/snakemake/utils.py", line 430, in format
#        return fmt.format(_pattern, *args, **variables)
#      File "/usr/local/lib/python3.8/string.py", line 163, in format
#        return self.vformat(format_string, args, kwargs)
#      File "/usr/local/lib/python3.8/string.py", line 167, in vformat
#        result, _ = self._vformat(format_string, args, kwargs, used_args, 2)
#      File "/usr/local/lib/python3.8/string.py", line 207, in _vformat
#        obj, arg_used = self.get_field(field_name, args, kwargs)
#      File "/usr/local/lib/python3.8/string.py", line 272, in get_field
#        obj = self.get_value(first, args, kwargs)
#      File "/usr/local/lib/python3.8/string.py", line 229, in get_value
#        return kwargs[key]
#    KeyError: 'params'
#
#    During handling of the above exception, another exception occurred:
#

rule generateLayoutContigsInputs:
    input:
        graph      = rules.verkko.input.graph,
        paths      = rules.buildGraph.output.paths
    output:
        nodemap    = '6-layoutContigs/combined-nodemap.txt',
        edges      = '6-layoutContigs/combined-edges.gfa',
        alignments = '6-layoutContigs/combined-alignments.gaf',
        paths      = '6-layoutContigs/consensus_paths.txt',
        lengths    = '6-layoutContigs/nodelens.txt'
    log:        
        err        = '6-layoutContigs/createLayoutInputs.err'
    params:
        maps       = getAllMappings(6),
        graphs     = getAllGraphs(6),
        aligns     = getAllAlignments(6)
    threads:
        int(config['lay_n_cpus'])
    resources:
        job_id = 1,
        #n_cpus = 1,
        #mem_gb = 8,
        #time_h = 2
        n_cpus = int(config['lay_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'lay'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'lay')
    group:
        'layoutGroup'
    shell:
        '''
cd 6-layoutContigs

cat > ./createLayoutInputs.sh <<EOF
#!/bin/sh
set -e

cat {params.maps} \\\\
> ../{output.nodemap}

cat {params.graphs} \\\\
| grep '^L' \\\\
> ../{output.edges}

cat {params.aligns} ../{input.paths} \\\\
> ../{output.alignments}

cat ../{input.graph} \\\\
| awk 'BEGIN \\\\
       {{
          FS="[ \\t]+"; OFS="\\t"; \\\\
       }} \\\\
       (\$1 == "S") && (\$3 != "*") \\\\
       {{ \\\\
          print \$2, ">"\$2; \\\\
       }}' \\\\
> ../{output.paths}

cat {params.graphs} \\\\
| awk 'BEGIN \\\\
       {{
          FS="[ \\t]+"; OFS="\\t"; \\\\
       }} \\\\
       (\$1 == "S") && (\$3 != "*") \\\\
       {{ \\\\
          print \$2, length(\$3); \\\\
       }}' \\\\
> ../{output.lengths}
EOF

chmod +x ./createLayoutInputs.sh

./createLayoutInputs.sh > ../{log.err} 2>&1
        '''


#
#  Layout paths from either
#     rules.verkko.input.graph
#        5-untip/unitig-popped-unitig-normal-connected-tip.gfa
#  or from
#     rules.rukki.output.pathsgaf
#        6-rukki/unitig-popped-unitig-normal-connected-tip.paths.gaf
#  depending on config ruk_enable.
#

rule layoutContigs:
    input:
        nodemap    = rules.generateLayoutContigsInputs.output.nodemap,
        edges      = rules.generateLayoutContigsInputs.output.edges,
        alignments = rules.generateLayoutContigsInputs.output.alignments,
        paths      = rules.generateLayoutContigsInputs.output.paths if config['ruk_enable'] == "False" else rules.rukki.output.pathsgaf,
        lengths    = rules.generateLayoutContigsInputs.output.lengths
    output:
        layout     = rules.verkko.input.layout,
        scfmap     = rules.verkko.input.scfmap,
        gaps       = '6-layoutContigs/gaps.txt'
    log:
        err        = '6-layoutContigs/createLayout.err'
    threads:
        int(config['lay_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['lay_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'lay'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'lay')
    group:
        'layoutGroup'
    shell:
        '''
cd 6-layoutContigs

cat > ./createLayout.sh <<EOF
#!/bin/sh
set -e

{PYTHON} {VERKKO}/scripts/get_layout_from_mbg.py \\\\
  ../{input.nodemap} \\\\
  ../{input.edges} \\\\
  ../{input.alignments} \\\\
  ../{input.paths} \\\\
  ../{input.lengths} \\\\
  ../{output.layout} \\\\
  ../{output.scfmap}

{PYTHON} {VERKKO}/scripts/check_layout_gaps.py < ../{output.layout} > ../{output.gaps}
EOF

chmod +x ./createLayout.sh

./createLayout.sh > ../{log.err} 2>&1
        '''

