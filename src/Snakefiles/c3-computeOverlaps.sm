#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule computeOverlaps .....
#

checkpoint configureOverlaps:
    input:
        seqstore  = {rules.buildStore.output.seqstore}
    output:
        finished  = '0-correction/configureOverlaps.finished'
    log:
        err       = '0-correction/configureOverlaps.err'
    params:
        minread   = config['cor_min_read'],
        minolap   = config['cor_min_overlap']
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 1,
        time_h = 1
    shell:
        '''
cd 0-correction

cat > ./configureOverlaps.sh <<EOF
#!/bin/sh
set -e

#  Configure overlap jobs.
#
echo "Configuring overlap jobs."
{VERKKO}/bin/overlapInCorePartition \\\\
  -S  ../{input.seqstore} \\\\
  -hl 640000000 \\\\
  -rl 10000000000 \\\\
  -ol {params.minolap} \\\\
  -o  hifi.partition

#  Build script input for each overlap job.  This moves each line in 'ovlopt' to
#  a file named after the job id in the overlap-jobs/ directory.
#
mkdir -p overlap-jobs

cat hifi.partition.ovljob \\\\
| \\\\
awk '{{ jobname="overlap-jobs/" \$1 ".params"; getline < "hifi.partition.ovlopt"; print > jobname }}'

rm hifi.partition.ovlbat
rm hifi.partition.ovljob
rm hifi.partition.ovlopt

touch ../{output.finished}
EOF

chmod +x ./configureOverlaps.sh

./configureOverlaps.sh > ../{log.err} 2>&1
        '''




rule computeOverlaps:
    input:
        seqstore  = {rules.buildStore.output.seqstore},
        ignore    = {rules.countKmers.output.ignore},
        params    = '0-correction/overlap-jobs/{nnnn}.params',
        finished  = {rules.configureOverlaps.output.finished}
    output:
        ovb       = '0-correction/overlap-jobs/{nnnn}.ovb',
        stats     = '0-correction/overlap-jobs/{nnnn}.stats'
    log:
        err       = '0-correction/overlap-jobs/{nnnn}.err'
    params:
        mersize   = config['mer_size'],
        minread   = config['cor_min_read'],
        minolap   = config['cor_min_overlap'],
        hashbits  = config['cor_hash_bits']
    threads:
        int(config['ovb_n_cpus']),
    resources:
        job_id = '{nnnn}',
        n_cpus = int(config['ovb_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'ovb'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'ovb')
    shell:
        '''
cd 0-correction/overlap-jobs

params=`cat ../../{input.params}`

cat > ./{wildcards.nnnn}.sh <<EOF
#!/bin/sh
set -e

#  Parameters from '{input.params}':
#    $params

{VERKKO}/bin/overlapInCore \\\\
  -t {threads} \\\\
  -k {params.mersize} \\\\
  -k ../../{input.ignore} \\\\
  --hashbits {params.hashbits} \\\\
  --hashload 0.8 \\\\
  --maxerate  0.01 \\\\
  --minlength {params.minolap} \\\\
  $params \\\\
  -o ../../{output.ovb}.WORKING \\\\
  -s ../../{output.stats} \\\\
  ../../{input.seqstore} \\\\
&& \\\\
mv -f ../../{output.ovb}.WORKING ../../{output.ovb}
EOF

chmod +x ./{wildcards.nnnn}.sh

./{wildcards.nnnn}.sh > ../../{log.err} 2>&1
        '''



def combineOverlapsI(wildcards):
    return expand("0-correction/overlap-jobs/{nnnn}.ovb", nnnn = glob_wildcards("0-correction/overlap-jobs/{xxxx}.params").xxxx)


def combineOverlapsP(wildcards):
    paths = expand("overlap-jobs/{nnnn}.ovb", nnnn = glob_wildcards("0-correction/overlap-jobs/{xxxx}.params").xxxx) 
    if len(paths) == 0:
       return paths
       
    outf  = open("0-correction/ovb-files", mode="wb")
    for path in paths:
        outf.write(f"{path}\n".encode())
    outf.close()

    return paths


rule combineOverlaps:
    input:
        finished  = {rules.configureOverlaps.output.finished},
        seqstore  = {rules.buildStore.output.seqstore},
        ovbs      = combineOverlapsI
    output:
        ovlstore  = directory("0-correction/hifi.ovlStore")
    log:
        err       = "0-correction/combineOverlaps.err"
    params:
        paths     = combineOverlapsP
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 128,
        time_h = 4
    shell:
        '''
cd 0-correction

sortmem=`expr {resources.mem_gb} - 1`

cat > ./combineOverlaps.sh <<EOF
#!/bin/sh
set -e


#ls ./overlap-jobs/*ovb > ./ovb-files

#  Note: file ../{output.ovlstore}.config is created by Snakemake when it
#  discovers inputs for rule combineOverlaps.  This lets us avoid having to
#  convert a list of filenames into a newline separated file, or having to
#  use a very very long command line.

{VERKKO}/bin/ovStoreConfig \\\\
  -S ../{input.seqstore} \\\\
  -L ./ovb-files \\\\
  -M $sortmem \\\\
  -create ../{output.ovlstore}.config

#  This version sorts in one giant batch and uses as much memory as it wants.
#
{VERKKO}/bin/ovStoreBuild \\\\
  -S ../{input.seqstore} \\\\
  -O ../{output.ovlstore} \\\\
  -C ../{output.ovlstore}.config
EOF

chmod +x ./combineOverlaps.sh

./combineOverlaps.sh > ../{log.err} 2>&1
        '''
