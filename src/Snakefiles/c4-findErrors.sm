#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule findErrors .....
#

checkpoint configureFindErrors:
    input:
        seqstore          = {rules.buildStore.output.seqstore},
        ovlstore          = {rules.combineOverlaps.output.ovlstore}
    output:
        finished          = '0-correction/configureFindErrors.finished'
    log:
        err               = '0-correction/configureFindErrors.err'
    params:
        batch_per_gb      = 10000000,
        gb_mem_limit      = config['red_mem_gb']
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 1,
        time_h = 1
    shell:
        '''
cd 0-correction

cat > ./configureFindErrors.sh <<EOF
#!/bin/sh
set -e

mkdir -p find-errors-jobs

batchlim=\`expr {params.batch_per_gb} \* {params.gb_mem_limit}\`

{VERKKO}/bin/sqStoreDumpMetaData -S ../{input.seqstore} -reads \\\\
| \\\\
awk -v lim=\$batchlim \\\\
'function output(bat, bgn, end, file) {{
   file=sprintf("find-errors-jobs/%04d.range", bat)
   print bgn, end > file
   close(file)
 }}
 BEGIN {{ bat=1; bgn=1; end=1; len=0; }}
 /^[ \\t]*[0-9]+/ {{
   if (len + \$3 > lim) {{
     output(bat, bgn, end)
     bat++
     bgn = \$1  #  OEA expects inclusive ranges
     len =  0
   }}
   end  = \$1
   len += \$3
 }}
 END {{
   output(bat, bgn, end)
 }}'

touch ../{output.finished}
EOF

chmod +x ./configureFindErrors.sh

./configureFindErrors.sh > ../{log.err} 2>&1
        '''



rule computeErrors:
    input:
        seqstore          = {rules.buildStore.output.seqstore},
        ovlstore          = {rules.combineOverlaps.output.ovlstore},
        range             = '0-correction/find-errors-jobs/{nnnn}.range',
        finished          = {rules.configureFindErrors.output.finished}
    output:
        red               = '0-correction/find-errors-jobs/{nnnn}.red'
    log:
        err               = '0-correction/find-errors-jobs/{nnnn}.err'
    params:
        minolap           = config['cor_min_overlap']
    threads:
        int(config['red_n_cpus']),
    resources:
        job_id = 1,
        n_cpus = int(config['red_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'red'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'red')
    shell:
        '''
cd       0-correction/find-errors-jobs

range=`cat ../../{input.range}`
if [ {threads} -gt 1 ]; then
   ncpus=`expr {threads} - 1`          #  One CPU is used for I/O.
else
   ncpus={threads}
fi

cat > ./{wildcards.nnnn}.sh <<EOF
#!/bin/sh
set -e

{VERKKO}/bin/findErrors \\\\
  -t $ncpus \\\\
  -S ../../{input.seqstore} \\\\
  -O ../../{input.ovlstore} \\\\
  -R $range \\\\
  -l {params.minolap} \\\\
  -e 0.01 \\\\
  -m 0.003 \\\\
  -s \\\\
  -p 5 \\\\
  -o ../../{output.red}.WORKING \\\\
&& \\\\
mv -f ../../{output.red}.WORKING ../../{output.red}
EOF

chmod +x ./{wildcards.nnnn}.sh

./{wildcards.nnnn}.sh > ../../{log.err} 2>&1
        '''


def fixErrorsI(wildcards):
    paths = expand("0-correction/find-errors-jobs/{nnnn}.red", nnnn = glob_wildcards("0-correction/find-errors-jobs/{xxxx}.range").xxxx)
    return paths


def fixErrorsP(wildcards):
    paths = expand("find-errors-jobs/{nnnn}.red", nnnn = glob_wildcards("0-correction/find-errors-jobs/{xxxx}.range").xxxx) 

    #outf  = open("0-correction/red-files", mode="wb")
    #for path in paths:
    #    outf.write(f"{path}\n".encode())
    #outf.close()

    return paths


rule fixErrors:
    input:
        seqstore  = {rules.buildStore.output.seqstore},
        ovlstore  = {rules.combineOverlaps.output.ovlstore},
        reds      = fixErrorsI,
        finished  = {rules.configureFindErrors.output.finished}
    output:
        red       = '0-correction/red.red',
        fasta     = '0-correction/hifi-corrected.fasta.gz'
    log:
        err       = "0-correction/fixErrors.err"
    params:
        paths     = fixErrorsP
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 16,
        time_h = 4
    shell:
        '''
cd 0-correction

cat > ./fixErrors.sh <<EOF
#!/bin/sh

echo ""
echo Combine corrections.
echo ""

#  red files MUST be in sorted order, which fixErrorsP doesn't return.
cat find-errors-jobs/*red > red.red

#  Use those corrections to correct the reads.
{VERKKO}/bin/fixErrors \\\\
  -S   ../{input.seqstore} \\\\
  -red ../{output.red} \\\\
  -O   ../{output.fasta}
EOF

chmod +x ./fixErrors.sh

./fixErrors.sh > ../{log.err} 2>&1
        '''


rule correctHiFi:
    input:
        fasta    = {rules.fixErrors.output.fasta}
    output:
        fasta    = 'hifi-corrected.fasta.gz'
    log:
    params:
        keepinter= config['keep_intermediate']
    threads:
        1
    resources:
        n_cpus = 1,
        mem_gb = 1,
        time_h = 1
    shell:
        '''
mv {input.fasta} {output.fasta}

if [ {params.keepinter} = "False" ] ; then
  rm -rf ./0-correction
fi
        '''
