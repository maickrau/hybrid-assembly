#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule combineConsensus combines the outputs of consensus into a single
#  file, and rename the sequences back to their original names.
#


#  These two functions return different paths to the inputs.  The first
#  returns a path relative to the root directory, used by Snakemake itself to
#  figure out the DAG.  The second returns a path relative to the 7-consensus
#  directory, which we use when running the command.
#
def combineConsensusI(wildcards):
    return expand("7-consensus/packages/part{nnnn}.fasta", nnnn = glob_wildcards("7-consensus/packages/part{xxxx}.cnspack").xxxx)
def combineConsensusP(wildcards):
    return expand(            "packages/part{nnnn}.fasta", nnnn = glob_wildcards("7-consensus/packages/part{xxxx}.cnspack").xxxx)
def combineConsensusB(wildcards):
    return expand(            "packages/part{nnnn}.bam*.bam", nnnn = glob_wildcards("7-consensus/packages/part{xxxx}.cnspack").xxxx) 

rule combineConsensus:
    input:
        packcns   = combineConsensusI,
        tigmap    = rules.buildPackages.output.tigmap,
        scfmap    = rules.layoutContigs.output.scfmap,
        layout    = rules.layoutContigs.output.layout,
        ontalns   = rules.generateLayoutContigsInputs.output.ontalns,
        hificov   = rules.verkko.input.hifi5cov,
        finished  = rules.buildPackages.output.finished,
        pathstsv  = rules.rukki.output.pathstsv if config['ruk_enable'] == "True" else rules.emptyfile.output,
        graph     = rules.verkko.input.graph
    output:
        bam       = rules.verkko.input.bam,
        cns       = rules.verkko.input.cns,
        cnshap1   = rules.verkko.input.cnshap1,
        cnshap2   = rules.verkko.input.cnshap2,
        cnsunas   = rules.verkko.input.cnsunas,
        combined  = '7-consensus/combined.fasta'
    log:
        out       = '7-consensus/combineConsensus.out',
        err       = '7-consensus/combineConsensus.err'
    params:
        MASHMAP   = config.get('MASHMAP', "{VERKKO}/bin/mashmap"),
        SAMTOOLS  = config.get('SAMTOOLS', "{VERKKO}/bin/samtools"),
        packcns   = combineConsensusP,
        keepinter = config['keep_intermediate'],
        short_len = config['short_contig_length'],
        screens   = config['screen'],
        packbam   = combineConsensusB,
        haveBAM    = config['withBAM']
    threads:
        8
    resources:
        job_id = 1,
        n_cpus = 8,
        mem_gb = lambda wildcards, input, attempt: getAlignMemoryRequest(attempt, 2, input.packcns),
        time_h = 4
    shell:
        '''
cd 7-consensus

label1=""
label2=""

if [ -e ../6-rukki/label1 ] ; then label1=`cat ../6-rukki/label1` ; fi
if [ -e ../6-rukki/label2 ] ; then label2=`cat ../6-rukki/label2` ; fi

if [ -e ../../label1 ] ; then label1=`cat ../../label1` ; fi
if [ -e ../../label2 ] ; then label2=`cat ../../label2` ; fi


cat > ./combineConsensus.sh <<EOF
#!/bin/sh
set -e


echo "--------------------"
echo "Combining consensus results."
echo ""

{PYTHON} {VERKKO}/scripts/fasta_combine.py combine combined.fasta \\\\
  ../{input.tigmap} \\\\
  ../{input.scfmap} \\\\
  {params.packcns}

echo "--------------------"
echo "Filtering short/disconnected and contaminants."
echo ""
screen=""
if [ "x{params.screens}" != "x" ]; then
   screen="--contaminant {params.screens} --mashmap {params.MASHMAP}"
fi

{PERL} {VERKKO}/scripts/screen-assembly.pl \\\\
 --assembly      combined.fasta \\\\
 --graph         ../{input.graph} \\\\
 --graphmap      ../{input.scfmap} \\\\
 --hifi-coverage ../{input.hificov} \\\\
 --minlength     {params.short_len} \\\\
 --output        assembly \\\\
 \$screen \\\\
 --threads       {threads} \\\\
> ./screen-assembly.out 2> ./screen-assembly.err

#  Copy the screened assembly to the output.
cp assembly.fasta ../{output.cns}

if [ "{params.haveBAM}" = "True" ]; then
   echo "--------------------"
   echo "Combining consensus bam results."
   echo ""
   mem_per_core=\`expr {resources.mem_gb} \/ {threads} | awk '{{if (\$1 < 1) print "1G"; else print \$1"G"}}'\`

   {params.SAMTOOLS} merge -f -O bam --reference combined.fasta -@{threads} -u - {params.packbam} | {PYTHON} {VERKKO}/scripts/bam_rename.py ../{input.layout} ../{input.ontalns} ../{input.scfmap} ../{input.tigmap} {params.packcns} | {params.SAMTOOLS} sort -m \$mem_per_core -@{threads} -o ../{output.bam}
else
   touch ../{output.bam}
fi

#  Try to circularize, the script will output to the same file as input since it caches the sequences
#  if it fails to circularize it will output sequence unchanged
for xx in assembly.*.exemplar.fasta ; do
  if [ -e \$xx ]; then
    {PYTHON} {VERKKO}/scripts/circularize_ctgs.py -f 0.65 -p 100 -o \$xx --min-ovl 2500 \$xx
  fi
done

#  Jump through hoops to not fail when there are no contaminant outputs.
for xx in assembly.*.fasta ; do
  if [ -e \$xx ] ; then
    cp \$xx ../\$xx
  fi
done



if [ x$label1 = x -o x$label2 = x ] ; then
  echo "--------------------"
  echo "No haplotypes supplied, will not extract them from consensus results."
  echo ""

  touch ../{output.cnshap1}
  touch ../{output.cnshap2}
  touch ../{output.cnsunas}

else
  echo "--------------------"
  echo "Finding haplotypes for label1='$label1' and label2='$label2'."
  echo ""

  touch ./paths-haplotype1    #  Because if we don't, the awk below isn't guaranteed
  touch ./paths-haplotype2    #  to make them, and then the extract fails.
  touch ./paths-unassigned

  awk < ../{input.scfmap} \\\\
    'BEGIN {{
       FS="[ \\t]+"; OFS="\\t";
     }}
     (\$1 = "path") && (\$2 ~ /^$label1-[0-9]+$/)    {{ print \$2 > "./paths-haplotype1"; }}
     (\$1 = "path") && (\$2 ~ /^$label2-[0-9]+$/)    {{ print \$2 > "./paths-haplotype2"; }}
     (\$1 = "path") && (\$2 ~ /^unassigned-[0-9]+$/) {{ print \$2 > "./paths-unassigned"; }}'

  echo "--------------------"
  echo "Extracting haplotypes."
  echo ""

  if [ -e ./paths-haplotype1 ] ; then
    {PYTHON} {VERKKO}/scripts/fasta_extract.py extract ../{output.cnshap1} ./paths-haplotype1 ../{output.cns}
  fi
  if [ -e ./paths-haplotype2 ] ; then
    {PYTHON} {VERKKO}/scripts/fasta_extract.py extract ../{output.cnshap2} ./paths-haplotype2 ../{output.cns}
  fi
  if [ -e ./paths-unassigned ] ; then
    {PYTHON} {VERKKO}/scripts/fasta_extract.py extract ../{output.cnsunas} ./paths-unassigned ../{output.cns}
  fi
fi

if [ {params.keepinter} = False ] ; then
  echo "--------------------"
  echo "Removing intermediate files."
  echo ""
  rm -rf packages
fi
EOF

chmod +x ./combineConsensus.sh

./combineConsensus.sh > ../{log.out} 2> ../{log.err}
        '''
