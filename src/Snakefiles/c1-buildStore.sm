#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule buildStore creates a Canu seqStore to be used for correcting reads.
#

rule buildStore:
    input:
        HIFI_READS
    output:
        seqstore  = directory('0-correction/hifi.seqStore'),
    log:
        err       = '0-correction/buildStore.err'
    params:
        minread   = config['cor_min_read'],
        minolap   = config['cor_min_overlap']
    threads:
        int(config['sto_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['sto_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'sto'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'sto')
    shell:
        '''
cd 0-correction

cat > ./buildStore.sh <<EOF
#!/bin/sh
set -e

#  Construct a Canu seqStore for the HiFi reads.
#
echo "Building seqStore."
{VERKKO}/bin/sqStoreCreate \\\\
  -o ../{output.seqstore} \\\\
  -minlength {params.minread} \\\\
  -homopolycompress \\\\
  -pacbio-hifi hifi {input}

{VERKKO}/bin/sqStoreDumpMetaData -stats -S ../{output.seqstore}

# make sure we weren't given compressed reads
numTotBP=\`grep  -w "corrected\$" ../{output.seqstore}/info.txt |awk '{{print \$2}}'\`
numCompBP=\`grep -w "corrected-compressed\$" ../{output.seqstore}/info.txt |awk '{{print \$2}}'\`
if [ \$numTotBP -eq \$numCompBP ]; then
   echo "Error, it looks like you provided HPC sequences, please input uncompressed data"
   exit -1
fi

# check that the store has no duplicate read names, correction only keeps the read name up to the first space
count=\`wc -l ../{output.seqstore}/readNames.txt |awk '{{print \$1}}'\`
count_unique=\`cat ../{output.seqstore}/readNames.txt|awk '{{print \$2}}' |sort |uniq |wc -l\`

if [ \$count -ne \$count_unique ]; then
   echo "Error, the input has duplicate IDs:"
   cat ../{output.seqstore}/readNames.txt| awk '{{print \$2}}' | sort |uniq -c |awk '{{if (\$1 > 1) print "\t"\$0}}'
   exit -1
fi

EOF

chmod +x ./buildStore.sh

./buildStore.sh > ../{log.err} 2>&1
        '''
