#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

rule rukki:
    input:
        graph      = rules.verkko.input.graph,       #  5-untip/unitig-popped-unitig-normal-connected-tip.gfa
        hificov    = rules.verkko.input.hifi5cov     #  5-untip/unitig-popped-unitig-normal-connected-tip.hifi-coverage.csv 
    output:
        fasta      = '6-rukki/unitig-popped-unitig-normal-connected-tip.fasta',       #  For bandage
        graph      = '6-rukki/unitig-popped-unitig-normal-connected-tip.noseq.gfa',   #  For bandage
        colors     = '6-rukki/unitig-popped-unitig-normal-connected-tip.colors.csv',  #  For bandage
        pathstsv   = '6-rukki/unitig-popped-unitig-normal-connected-tip.paths.tsv',   #  For bandage
        pathsgaf   = '6-rukki/unitig-popped-unitig-normal-connected-tip.paths.gaf',   #  For consensus
    log:        
        err        = '6-rukki/rukki.err'

    params:
        hap1mers   = config['ruk_hap1'],
        hap2mers   = config['ruk_hap2'],
        haptype    = config['ruk_type'],
        fraction   = config['ruk_fract']
    threads:
        int(config['ruk_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['ruk_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'ruk'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'ruk')
    shell:
        '''
cd 6-rukki

cat > ./rukki.sh <<EOF
#!/bin/sh
set -e

#
#  Extract the sequence from the graph.
#

awk 'BEGIN \\\\
     {{ \\\\
        OFS="\\n"; \\\\
     }} \\\\
     (\$1 == "S") && (\$3 != "*") \\\\
     {{ \\\\
          print ">"\$2, \$3; \\\\
     }}' \\\\
< ../{input.graph} \\\\
> ../{output.fasta}

#
#  This is hap_blob.sh from Merqury, with an intermediate file stripped
#  out and Rukki-format color output written directly.
#
#  meryl-lookup output is:
#    contig-name  kmers-in-contig  kmers-in-db-1  kmers-contig-and-db-1  kmers-in-db-2  kmers-contig-and-db-2
#
#  rukki expects:  (it will ignore columns 4 and higher)
#    contig-name  kmers-contig-and-db-1  kmers-contig-and-db-2
#

{VERKKO}/bin/meryl-lookup -existence -threads {threads} \\\\
  -mers {params.hap1mers} {params.hap2mers} \\\\
  -sequence ../{output.fasta} \\\\
| \\\\
awk \\\\
  'BEGIN \\\\
   {{ \\\\
     FS="[ \\t]+"; OFS="\\t"; \\\\
     print "node\tmat\tpat\tmat:pat\tcolor"; \\\\
   }} \\\\
   \$1 != "Assembly" \\\\
   {{ color = "#AAAAAA"; \\\\
      if (\$4+\$6 > 100) {{ \\\\
         if      (\$4 > (\$4+\$6)*{params.fraction}) {{ color = "#FF8888"; }} \\\\
         else if (\$6 > (\$4+\$6)*{params.fraction}) {{ color = "#8888FF"; }} \\\\
         else                                        {{ color = "#FFFF00"; }} \\\\
      }} \\\\
      print \$1, \$4, \$6, \$4 ":" \$6, color; \\\\
   }}' \\\\
> ../{output.colors}

#
#  Inject coverage into the graph.
#

awk < ../{input.graph} \\\\
  'BEGIN \\\\
   {{ \\\\
     FS="[ \\t]+"; OFS="\\t"; \\\\
   }} \\\\
   {{ \\\\
     if (\$1 == "S") {{ \\\\
       print "S", \$2, "*", "LN:i:"length(\$3); \\\\
     }} else {{ \\\\
       print \$0; \\\\
     }} \\\\
   }}' \\\\
| \\\\
{PYTHON} {VERKKO}/scripts/inject_coverage.py --allow-absent \\\\
  ../{input.hificov} \\\\
> ../{output.graph}

#
#  Run Rukki.  Once for Bandage input, once for Consensus.
#

params=""
params="\$params --init-assign out_init_ann.csv"
params="\$params --refined-assign out_refined_ann.csv"
params="\$params --final-assign out_final_ann.csv"
params="\$params --marker-sparsity 5000"
params="\$params --issue-sparsity 1000"
params="\$params --try-fill-bubbles"

if [ x{params.haptype} = xtrio ]; then
   params="\$params --issue-len 200000  --marker-ratio 5. --issue-ratio 3. --issue-cnt 100"
else
   params="\$params --issue-len 2000000 --marker-ratio 3. --issue-ratio 2. --issue-cnt 1000"
fi

{VERKKO}/bin/rukki trio -g ../{output.graph} -m ../{output.colors}              -p ../{output.pathstsv} \$params
{VERKKO}/bin/rukki trio -g ../{output.graph} -m ../{output.colors} --gaf-format -p ../{output.pathsgaf} \$params
EOF

chmod +x ./rukki.sh

./rukki.sh > ../{log.err} 2>&1
        '''
