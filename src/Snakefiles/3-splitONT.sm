#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule splitONT rewrites the input ONT reads into partitioned FASTA files
#  for mapping to the unitig graph in parallel.
#
#  Configuration parameters limit the size of each split file so that
#  the number of bases or reads in each file is no more than some limit:
#    spl_bases - how many bases to put in each split file
#    spl_reads - how many reads to put in each split file
#
#  This rule is used by both alignONT (to align reads to the unitig graph)
#  and extractONT (to extract the reads needed for consensus).
#


#  A helper function to find the splitONT output and return their indices.
#  It is used (via the magic lambda) in 3-combineONT.sm and 7-extractONT.sm.
#
def splitONToutputs(wildcards):
    return glob_wildcards("3-align/split/ont{xxxx}.fasta.gz").xxxx


checkpoint splitONT:
    input:
        ont            = ONT_READS if config['withONT'] == "True" else {rules.emptyfile.output}
    output:
        split_finished = '3-align/splitONT.finished'
    log:
        err            = '3-align/splitONT.err'
    params:
        bases          = config['spl_bases'],
        reads          = config['spl_reads'],
        length         = config['spl_min_length']
    threads:
        int(config['spl_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['spl_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'spl'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'spl')
    shell:
        '''
cd 3-align

cat > ./splitONT.sh <<EOF
#!/bin/sh
set -e

mkdir -p split

{PYTHON} {VERKKO}/scripts/process_reads.py \\\\
  partition split/ont {params.bases} {params.reads} {params.length} \\\\
  {input.ont} \\\\
&& \\\\
touch ../{output.split_finished}
EOF

chmod +x ./splitONT.sh

./splitONT.sh > ../{log.err} 2>&1
        '''
