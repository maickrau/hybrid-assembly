#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule processGraph massages the MBG output into initial unitigs.
#
#  This is rule process_graph in Snakefile in the original.
#
#  Configuration Parameters:
#    None
#

rule processGraph:
    input:
        gfa   = rules.buildGraph.output.graph,
        paths = rules.buildGraph.output.paths,
        cov   = rules.buildGraph.output.hificov
    output:
        gfa = '2-processGraph/unitig-unrolled-hifi-resolved.gfa',
        map = '2-processGraph/unitig-mapping-1.txt'
    log:
        err = '2-processGraph/process.err'
    threads:
        int(config['utg_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['utg_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'utg'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'utg')
    shell:
        '''
cd 2-processGraph

cat > ./processGraph.sh <<EOF
#!/bin/sh
set -e

echo Gap insertion pass 1.
{PYTHON} {VERKKO}/scripts/insert_aln_gaps.py ../{input.gfa} ../{input.paths} 2 50 paths-nogap-1.gaf gaps-hifi-1.gaf gapone n \\\\
  > gapped-once-hifi-resolved.gfa

echo ""
echo Gap insertion pass 2.
{PYTHON} {VERKKO}/scripts/insert_aln_gaps.py gapped-once-hifi-resolved.gfa ../{input.paths} 2 300 paths-nogap-2.gaf gaps-hifi-2.gaf gaptwo n \\\\
  > gapped-twice-hifi-resolved.gfa

echo ""
echo Gap insertion pass 3.
{PYTHON} {VERKKO}/scripts/insert_aln_gaps.py gapped-twice-hifi-resolved.gfa ../{input.paths} 1 5 paths-nogap-3.gaf gaps-hifi-3.gaf gapthree n \\\\
  > gapped-hifi-resolved.gfa

echo ""
echo Haplogap fixing.
{PYTHON} {VERKKO}/scripts/fix_haplogaps.py gapped-hifi-resolved.gfa ../{input.paths} haplogap haplofix-mapping.txt \\\\
  > fixed-hifi-resolved.gfa

echo ""
echo Tip nrolling.
# coverage
grep -h '^L' ../{input.gfa} gapped-once-hifi-resolved.gfa gapped-twice-hifi-resolved.gfa gapped-hifi-resolved.gfa fixed-hifi-resolved.gfa \
  > combined-edges-uniques.gfa

# this used to have grep -v \*
#
cat ../{input.gfa} gapped-once-hifi-resolved.gfa gapped-twice-hifi-resolved.gfa gapped-hifi-resolved.gfa fixed-hifi-resolved.gfa \
| \
awk 'BEGIN \\\\
     {{ \\\\
        FS="[ \\t]+"; OFS="\\t"; \\\\
     }} \\\\
     \$1 == "S" \\\\
     {{ \\\\
        print \$2, length(\$3); \\\\
     }}' \\\\
  > nodelens-uniques.txt

{PYTHON} {VERKKO}/scripts/get_original_coverage.py \
  fixed-hifi-resolved.gfa \
  haplofix-mapping.txt \
  combined-edges-uniques.gfa \
  nodelens-uniques.txt \
  ../{input.cov} \
> hifi-nodecov.fixed-hifi-resolved.csv

cut -f 6 < ../{input.paths} \\\\
| \\\\
{PYTHON} {VERKKO}/scripts/unroll_tip_loops.py fixed-hifi-resolved.gfa 2 hifi-nodecov.fixed-hifi-resolved.csv \\\\
  > unrolled-hifi-resolved.gfa

{PYTHON} {VERKKO}/scripts/get_unroll_mapping.py fixed-hifi-resolved.gfa unrolled-hifi-resolved.gfa \\\\
  > unroll_mapping_1.txt

echo ""
echo Unitig creation.
{PYTHON} {VERKKO}/scripts/unitigify.py utig1- ../{output.map} \\\\
  < unrolled-hifi-resolved.gfa \\\\
  > ../{output.gfa}
EOF

chmod +x ./processGraph.sh

./processGraph.sh > ../{log.err} 2>&1
        '''
