#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Find hifi.ignoremers by counting k-mers in hifi.seqStore.
#
#  Runs meryl once (with -C option) to let it guess how many batches it will
#  take to count k-mers in all reads with the supplied memory limit.  That
#  many jobs are then executed, in parallel, each counting 1/max of the reads
#  (via `segment=n/max`).  Once all counting jobs are complete, the results
#  are combined into a single meryl database, then the common kmers are
#  extracted into `hifi.ignoremers`.
#
#  The rather convoluted method used here - batching four kmer jobs per
#  snakemake job - is used to get around two different meryl problems:
#
#   - The parameters used to encode kmers in a database are chosen poorly for
#     the output of a counting operation, resulting in very large compressed
#     blocks which then require lots of memory to decompress.  With lots of
#     batches, the 'merge' step exhausts memory.
#
#  A solution to that problem is to just make batches bigger and let
#  meryl compute multiple batches per run and automatically merge them (the
#  encode parameters are chosen a bit better for the merge operation).
#
#   - At the start of each batch, it asks the OS how much memory is currently
#     in use and sizes the batch so as to not exceed the limit.  On Linux,
#     the OS seems to lag behind actual memory usage so it reports that meryl
#     is currently using (e.g.,) 50% of it's requested size at the start of
#     the second batch.  The third gets worse, the fourth worse still, etc.
#     This cannot be reproduced on FreeBSD.
#
#     (This behavior seems to only get triggered with large batches and large
#      kmer sizes, which is why Canu is immune.)
#
#  So, the below manually computes 'large batches' by merging four meryl jobs
#  into one snakemake job, then merging the results of the snakemake jobs to
#  get the final full set of kmers.
#

checkpoint configureKmers:
    input:
        seqstore  = {rules.buildStore.output.seqstore}
    output:
        finished  = '0-correction/configureKmers.finished'
    log:
        err       = '0-correction/configureKmers.err'
    params:
        mersize   = config['mer_size'],
        memlim    = config['mer_mem_gb']
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 4,
        time_h = 1
    shell:
        '''
cd 0-correction

cat > ./configureKmers.sh <<EOF
#!/bin/sh
set -e

#  Configure meryl.
#
{VERKKO}/bin/meryl -C k={params.mersize} threads={threads} memory={params.memlim} \\\\
  count \\\\
    ../{input.seqstore} \\\\
    output none.meryl \\\\
> meryl.configure.out 2>&1

rm -rf none.meryl

nsegs=\`cat meryl.configure.out | grep '^Configured.*batches.$' | awk '{{ print \$13 }}'\`

#  Build script input for each meryl job.
mkdir -p kmer-jobs

echo \$nsegs > kmer-jobs/nSegments

seq 1 4 \$nsegs \\\\
| \\\\
awk '{{ printf("%03g\\n", \$1) }}' |  awk -v segs=\$nsegs '{{ jobname="kmer-jobs/" \$1 ".params"; print \$1 > jobname; close(jobnme); }}'

rm meryl.configure.out

touch ../{output.finished}
EOF

chmod +x ./configureKmers.sh

./configureKmers.sh > ../{log.err} 2>&1
        '''



rule computeKmers:
    input:
        seqstore  = {rules.buildStore.output.seqstore},
        segm      = '0-correction/kmer-jobs/{nnnn}.params',
        nseg      = '0-correction/kmer-jobs/nSegments',
        finished  = {rules.configureKmers.output.finished}
    output:
        meryl     = '0-correction/kmer-jobs/{nnnn}.meryl/merylIndex',
    log:
        err       = '0-correction/kmer-jobs/{nnnn}.err'
    params:
        mersize   = config['mer_size'],
        memlim    = config['mer_mem_gb']
    threads:
        int(config['mer_n_cpus']),
    resources:
        job_id = lambda wildcards, input, attempt: int(wildcards.nnnn),
        n_cpus = int(config['mer_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'mer'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'mer')
    shell:
        '''
cd 0-correction/kmer-jobs

segm=`cat ../../{input.segm}`
nseg=`cat ../../{input.nseg}`

cat > ./{wildcards.nnnn}.sh <<EOF
#!/bin/sh
set -e

seg1=\$( expr $segm + 0 )
seg2=\$( expr $segm + 1 )
seg3=\$( expr $segm + 2 )
seg4=\$( expr $segm + 3 )

seg1=\$( printf %03d \$seg1 )
seg2=\$( printf %03d \$seg2 )
seg3=\$( printf %03d \$seg3 )
seg4=\$( printf %03d \$seg4 )

seg1o=""
seg2o=""
seg3o=""
seg4o=""

#  Parameters from '{input.segm}' and
#                  '{input.nseg}':
#    segment '$segm' out of '$nseg'

if [ \$seg1 -le $nseg ] ; then
  seg1o="\$seg1.part.meryl"
  {VERKKO}/bin/meryl k={params.mersize} threads={threads} memory={resources.mem_gb} \\\\
    count \\\\
      segment=\$seg1/$nseg ../../{input.seqstore} \\\\
      output \$seg1o
fi

if [ \$seg2 -le $nseg ] ; then
  seg2o="\$seg2.part.meryl"
  {VERKKO}/bin/meryl k={params.mersize} threads={threads} memory={resources.mem_gb} \\\\
    count \\\\
      segment=\$seg2/$nseg ../../{input.seqstore} \\\\
      output \$seg2o
fi

if [ \$seg3 -le $nseg ] ; then
  seg3o="\$seg3.part.meryl"
  {VERKKO}/bin/meryl k={params.mersize} threads={threads} memory={resources.mem_gb} \\\\
    count \\\\
      segment=\$seg3/$nseg ../../{input.seqstore} \\\\
      output \$seg3o
fi

if [ \$seg4 -le $nseg ] ; then
  seg4o="\$seg4.part.meryl"
  {VERKKO}/bin/meryl k={params.mersize} threads={threads} memory={resources.mem_gb} \\\\
    count \\\\
      segment=\$seg4/$nseg ../../{input.seqstore} \\\\
      output \$seg4o
fi

{VERKKO}/bin/meryl k={params.mersize} threads={threads} memory={resources.mem_gb} \\\\
  union-sum \\\\
    \$seg1o \$seg2o \$seg3o \$seg4o \\\\
    output $segm.meryl

if [ -n "\$seg1o" ] ; then  rm -rf ./\$seg1o ; fi
if [ -n "\$seg2o" ] ; then  rm -rf ./\$seg2o ; fi
if [ -n "\$seg3o" ] ; then  rm -rf ./\$seg3o ; fi
if [ -n "\$seg4o" ] ; then  rm -rf ./\$seg4o ; fi

EOF

chmod +x ./{wildcards.nnnn}.sh

./{wildcards.nnnn}.sh > ../../{log.err} 2>&1
        '''



def combineKmersI(wildcards):
    return expand("0-correction/kmer-jobs/{nnnn}.meryl/merylIndex", nnnn = glob_wildcards("0-correction/kmer-jobs/{xxxx}.params").xxxx)


def combineKmersP(wildcards):
    paths = expand("kmer-jobs/{nnnn}.meryl", nnnn = glob_wildcards("0-correction/kmer-jobs/{xxxx}.params").xxxx) 
    if len(paths) == 0:
       return paths

    outf  = open("0-correction/kmer-databases", mode="wb")
    for path in paths:
        outf.write(f"{path}\n".encode())
    outf.close()

    return paths


rule countKmers:
    input:
        finished  = {rules.configureKmers.output.finished},
        illumina  = ILLUMINA_READS if config['withIllumina'] == "True" else {rules.emptyfile.output},
        dbs       = combineKmersI
    output:
        ignore    = '0-correction/hifi.ignoremers',
        meryldb   = directory('0-correction/meryl.k21.db')
    log:
        err       = "0-correction/combineKmers.err"
    params:
        mersize   = config['mer_size'],
        merthresh = config['mer_threshold'],
        merfilter = config['mer_filter'],
        memlim    = config['meg_mem_gb'],
        paths     = combineKmersP,
        consensus_bams = config['consensus_bams'] == 'True',
        withillumina = config['withIllumina'] == 'True'
    threads:
        8
    resources:
        job_id = 1,
        n_cpus = int(config['meg_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'meg'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'meg')
    shell:
        '''
cd 0-correction

cat > ./combineKmers.sh <<EOF
#!/bin/sh
set -e

#  Note!  Meryl v1 cannot do distinct= filtering with multiple
#  database inputs.  They need to be merged first.
#
{VERKKO}/bin/meryl threads={threads} \\\\
  union-sum {params.paths} \\\\
  output all.meryl

#  Note!  Meryl has a bug with 'print' outputs.  Printing to stdout
#  does not work with a chain of operations, so we print to temporary
#  files (this also lets us run in parallel) and combine the results
#  at the end.
#
#  (-V added so that the actual threshold is reported)
#
{VERKKO}/bin/meryl -V threads={threads} \\\\
  print ../{output.ignore}.##.tmp \\\\
  greater-than distinct={params.merfilter} \\\\
  all.meryl

cat ../{output.ignore}.??.tmp > ../{output.ignore}
rm  ../{output.ignore}.??.tmp

if [ {params.withillumina} ] && [ {params.consensus_bams} ] && [ -e {input.illumina} ]; then
    {VERKKO}/bin/meryl print count k=21 {input.illumina} output ../{output.meryldb}
fi
EOF

chmod +x ./combineKmers.sh

./combineKmers.sh > ../{log.err} 2>&1
        '''
