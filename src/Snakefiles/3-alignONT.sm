#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule indexGraph indexes the unitig graph.
#

rule indexGraph:
    input:
        gfa               = rules.processGraph.output.gfa
    output:
        index             = "3-align/graph.index",   #  Prefix hardcoded in command below!
    log:
        err               = "3-align/index.err"
    params:
        GRAPHALIGNER      = config.get('GRAPHALIGNER', "{VERKKO}/bin/GraphAligner"),
        bandwidth         = config['ali_bandwidth'],
        mxm_length        = config['ali_mxm_length'],
        mem_count         = config['ali_mem_count'],
    threads:
        int(config['ali_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['ali_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getAlignMemoryRequest(attempt, 15, [ input.gfa ]),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'ali')
    shell:
        '''
cd 3-align

cat > ./index.sh <<EOF
#!/bin/sh
set -e

{params.GRAPHALIGNER} -t {threads} -g ../{input.gfa} -f empty -a empty.gaf \\\\
  --seeds-mxm-cache-prefix ../3-align/graph \\\\
  --bandwidth {params.bandwidth} \\\\
  --seeds-mxm-length {params.mxm_length} \\\\
  --seeds-mem-count {params.mem_count} && touch ../{output.index}

rm -f empty.gaf
EOF

chmod +x ./index.sh

./index.sh > ../{log.err} 2>&1
        '''


#
#  Rule alignONT aligns the partitioned ONT reads to the unitig graph.
#

rule alignONT:
    input:
        reads             = "3-align/split/ont{nnnn}.fasta.gz",
        index             = rules.indexGraph.output.index,   #  Prefix hardcoded in command below!
        gfa               = rules.processGraph.output.gfa,
        finished          = rules.splitONT.output.finished
    output:
        alignments        = '3-align/aligned{nnnn}.gaf'
    log:
        err               = '3-align/aligned{nnnn}.err'
    params:
        GRAPHALIGNER      = config['GRAPHALIGNER'],

        alignmentstmp     = '3-align/aligned{nnnn}.WORKING.gaf',
        mxm_length        = config['ali_mxm_length'],
        mem_count         = config['ali_mem_count'],
        bandwidth         = config['ali_bandwidth'],
        multi_score_f     = config['ali_multi_score_f'],
        clipping          = config['ali_clipping'],
        min_score         = config['ali_min_score'],
        end_clipping      = config['ali_end_clipping'],
        incompat_cutoff   = config['ali_incompat_cutoff'],
        max_trace         = config['ali_max_trace']
    threads:
        int(config['ali_n_cpus'])
    resources:
        job_id = '{nnnn}',
        n_cpus = int(config['ali_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getAlignMemoryRequest(attempt, 10, [ input.index ]),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'ali', 6.0)
    shell:
        '''
cd 3-align

cat > ./aligned{wildcards.nnnn}.sh <<EOF
#!/bin/sh
set -e

{params.GRAPHALIGNER} -t {threads} -g ../{input.gfa} -f ../{input.reads} -a ../{params.alignmentstmp} \\\\
  --seeds-mxm-cache-prefix ../3-align/graph \\\\
  --seeds-mxm-length {params.mxm_length} \\\\
  --seeds-mem-count {params.mem_count} \\\\
  --bandwidth {params.bandwidth} \\\\
  --multimap-score-fraction {params.multi_score_f} \\\\
  --precise-clipping {params.clipping} \\\\
  --min-alignment-score {params.min_score} \\\\
  --hpc-collapse-reads \\\\
  --discard-cigar \\\\
  --clip-ambiguous-ends {params.end_clipping} \\\\
  --overlap-incompatible-cutoff {params.incompat_cutoff} \\\\
  --max-trace-count {params.max_trace} \\\\
&& \\\\
mv -f ../{params.alignmentstmp} ../{output.alignments}
EOF

chmod +x ./aligned{wildcards.nnnn}.sh

./aligned{wildcards.nnnn}.sh > ../{log.err} 2>&1
        '''
